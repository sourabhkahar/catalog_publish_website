<div class="bg-gray-100 min-h-screen flex items-center justify-center p-6" x-data="flipbook()">
  <div class="max-w-3xl w-full space-y-4">
    <!-- Header / controls -->
    <div class="flex justify-between items-center">
      <div class="flex gap-2">
        <button @click="prev()" :disabled="currentIndex === 0"
          class="px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50">Prev</button>
        <button @click="next()" :disabled="currentIndex === pages.length - 1"
          class="px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50">Next</button>
      </div>
      <div class="text-sm font-medium">
        Page <span x-text="currentIndex + 1"></span> / <span x-text="pages.length"></span>
      </div>
      <!-- <div>
        <button @click="goFirst()" class="text-xs underline text-gray-700">First</button>
        <button @click="goLast()" class="text-xs underline text-gray-700 ml-2">Last</button>
      </div> -->
    </div>
  
    <!-- Flipbook viewport -->
    <div class="relative w-full h-[400px] bg-white rounded-2xl overflow-hidden flip-wrapper">
      <template x-for="(page, idx) in pages" :key="idx">
        <div class="page w-full h-full" :class="{
              'z-20': idx === currentIndex,
              'flipped': idx < currentIndex,
              'page-back': false
            }" x-show="idx === currentIndex || idx === currentIndex - 1" x-transition:enter="transition"
          style="will-change: transform;">
          <!-- image background -->
          <div class="w-full h-full relative select-none">
            <img :src="page.src" alt="" class="w-full h-full object-cover rounded-2xl" draggable="false" />
  
            <!-- hotspots -->
            <template x-for="(hs, hidx) in page.hotspots" :key="hidx">
              <button
                class="hotspot absolute flex items-center justify-center w-7 h-7 rounded-full border-2 border-white bg-red-500 text-xs text-white font-bold"
                :style="`left: ${hs.x}%; top: ${hs.y}%; transform: translate(-50%, -50%);`"
                @click="handleHotspot(page, hs)" x-tooltip="hs.label">
                <span x-text="hs.label"></span>
              </button>
            </template>
  
            <!-- zoom trigger -->
            <button @click="openZoom(page)"
              class="absolute bottom-3 right-3 bg-white/90 px-3 py-1 rounded shadow text-xs">
              Zoom
            </button>
          </div>
        </div>
      </template>
    </div>
  
    <!-- Thumbnails / navigation strip -->
    <div class="flex gap-2 overflow-x-auto py-2">
      <template x-for="(page, idx) in pages" :key="idx">
        <div class="flex-shrink-0 cursor-pointer" @click="go(idx)">
          <div class="w-24 h-16 rounded overflow-hidden border-2"
            :class="currentIndex === idx ? 'border-blue-600' : 'border-gray-300'">
            <img :src="page.src" class="w-full h-full object-cover" alt="" draggable="false" />
          </div>
          <div class="text-[10px] text-center mt-1">Page <span x-text="idx+1"></span></div>
        </div>
      </template>
    </div>
  </div>
</div>

<div id="cart-modal" class="fixed inset-0 z-50 hidden" >
  <div class="fixed inset-0 bg-black/50" aria-hidden="true" data-close-target >XX</div>
  <div class="relative max-w-2xl mx-auto mt-20 bg-white rounded-xl shadow-lg overflow-hidden">
    <!-- Header -->
    <div class="flex justify-between items-center px-6 py-4 border-b">
      <h2 class="text-xl font-semibold">Your Cart</h2>
      <button aria-label="Close" data-close-target class="text-gray-600 hover:text-gray-800 text-2xl leading-none" onclick="hideCart()">&times;</button>
    </div>

    <!-- Items -->
    <div class="p-6 space-y-6">
      <!-- Item 1 -->
      <div class="flex gap-4 items-start border rounded p-4">
        <div class="w-20 h-20 flex-shrink-0">
          <img src="https://via.placeholder.com/80" alt="Product image" class="w-full h-full object-cover rounded">
        </div>
        <div class="flex-1">
          <div class="flex justify-between">
            <div>
              <div class="font-medium">Sample Product A</div>
              <div class="text-sm text-gray-500">SKU: SPA-001</div>
            </div>
            <div class="text-right">
              <div class="font-semibold">$19.99</div>
            </div>
          </div>
          <div class="mt-2 flex items-center gap-3">
            <div class="flex border rounded overflow-hidden text-sm">
              <button class="px-3 py-1 bg-gray-200 qty-decrement" aria-label="Decrease quantity">-</button>
              <div class="px-4 py-1" data-quantity>1</div>
              <button class="px-3 py-1 bg-gray-200 qty-increment" aria-label="Increase quantity">+</button>
            </div>
            <button class="text-red-600 text-xs underline remove-item">Remove</button>
          </div>
        </div>
      </div>
      <!-- Summary -->
      <div class="border-t pt-4 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div class="text-sm text-gray-600">
          <div>Subtotal: <span id="subtotal">$38.99</span></div>
          <div>Discount: <span id="discount">-$0.00</span></div>
        </div>
        <div class="flex-1 flex justify-between items-center">
          <div class="text-lg font-bold">Total: <span id="total">$38.99</span></div>
          <div class="flex gap-2">
            <button id="clear-cart" class="px-4 py-2 bg-gray-200 rounded">Clear</button>
            <button class="px-6 py-2 bg-green-600 text-white rounded">Checkout</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Footer small note -->
    <div class="px-6 py-3 bg-gray-50 text-xs text-gray-500">
      Prices include all applicable taxes. Shipping calculated at checkout.
    </div>
  </div>
</div>


<script>
  function hideCart() {
    document.getElementById("cart-modal").classList.add("hidden");
    document.getElementById("cart-modal").classList.remove("flex");
  }
  function flipbook() {
    return {
      pages: [
        {
          src: './images/test4.jpg',
          hotspots: [
            { x: 20, y: 30, label: 'A', actionName: 'showInfo', payload: { img:'test4.jpg',title:'first Product' } },
            { x: 80, y: 60, label: 'B', actionName: 'showInfo', payload: { img:'test4.jpg',title:'Second Product' } },
          ],
        },
        {
          src: './images/test5.jpg',
          hotspots: [
            { x: 20, y: 30, label: 'A', actionName: 'showInfo', payload: { img:'test5.jpg',title:'thrid Product' } },
            { x: 80, y: 60, label: 'B', actionName: 'showInfo', payload: { img:'test5.jpg',title:'fourth Product' } },
          ],
        },
        {
          src: './images/test1.jpg',
          hotspots: [
            { x: 20, y: 30, label: 'A', actionName: 'showInfo', payload: 'Info A on Page 3' },
            { x: 80, y: 60, label: 'B', actionName: 'showInfo', payload: 'Info B on Page 3' },
          ],
        },
        {
          src: './images/test2.jpg',
          hotspots: [
            { x: 50, y: 50, label: 'C', actionName: 'showInfo', payload: 'Info C on Page 2' },
            { x: 30, y: 80, label: 'D', actionName: 'customAction', payload: { value: 42 } },
          ],
        },
        {
          src: './images/test3.jpg',
          hotspots: [
            { x: 60, y: 40, label: 'E', actionName: 'showInfo', payload: 'Info E on Page 3' },
          ],
        },
      ],
      currentIndex: 0,
      zoomed: false,
      zoomedPage: null,
      log: [],
      handleHotspot(page, hs) {
        // Dispatch based on actionName
        if (hs.actionName === 'showInfo') {
          // this.log.unshift(`Hotspot "${hs.label}" clicked: ${hs.payload}`);
          // alert(hs.payload);
          document.getElementById("cart-modal").classList.remove("hidden");
          document.getElementById("cart-modal").classList.add("flex");

        } else if (hs.actionName === 'customAction') {
          this.log.unshift(`Custom action on "${hs.label}", data: ${JSON.stringify(hs.payload)}`);
          // example: do something with payload
          console.log('customAction payload', hs.payload);
        } else {
          this.log.unshift(`Unknown hotspot "${hs.label}" clicked`);
        }
      },
      next() {
        if (this.currentIndex < this.pages.length - 1) {
          this.currentIndex++;
        }
      },
      prev() {
        if (this.currentIndex > 0) {
          this.currentIndex--;
        }
      },
      go(i) {
        if (i >= 0 && i < this.pages.length) this.currentIndex = i;
      },
      goFirst() { this.currentIndex = 0; },
      goLast() { this.currentIndex = this.pages.length - 1; },
      openZoom(page) {
        this.zoomedPage = page;
        this.zoomed = true;
      },
      closeZoom() {
        this.zoomed = false;
        this.zoomedPage = null;
      },
    };
  }
</script>